📘 Unified Command Protocol – v2.9 (May 2025)

This protocol governs all data production, QA, file storage, and metadata registration for the Plant-Based System project.

---

📁 SSOT Directory Structure

All files must be stored as:
- `/ssot/phaseX/moduleY/data/` → Data Tables (DT)
- `/ssot/phaseX/moduleY/outputs/` → Texts, Figures, HTML, etc.

Other subfolders are disallowed unless explicitly authorized.

---

🚫 Disallowed Formats

- ❌ `.zip` archives are not permitted
- ❌ Metadata must not be stored in `.txt` or unversioned temp registers

---

📤 Mandatory Metadata Structure

Each submission must visibly include this in the chat:

📤 Submission Metadata  
Index Code (Provisional): P1.M2.DT01  
Phase: 1  
Module: 2  
Type: DT (Data Table)  
Title/Description: Global nutrient availability by food type, category, and region  
File Name: P1_M2_DT02_NutrientAvailabilityByFood.csv  
Storage Location: /ssot/phase1/module2/data/  
Source Category: 🟢 A  
Notes: Derived from Phase 0 and USDA/INFOODS density data

This is required for audit integrity.

---

🕒 HTML Synthesis Deferral

- ❌ HTML is not to be rendered per module
- ✅ HTML is only generated after full phase completion
- Initiated by Command only

---

🔐 Metadata Governance (NEW)

✅ Metadata write-locks to a **single source of truth**:

📁 `/ssot/Master_Index_Register.csv`

📌 All new submissions:
- Must be appended to this file
- Must audit the existing file before appending
- Are version-validated at time of write

🛑 No alternative registers (`.txt`, `PhaseX_Master.txt`) are allowed.

📘 Each commit is logged and outputted with timestamp confirmation

---

🧾 Latest Protocol Versions

- Unified Command Protocol: **v2.9**
- Phase Chat Protocol: v1.1
- HTML Output Protocol: v1.2
- README Governance: v1.1

All project activity must comply with these until formally superseded.

---

🚫 NEW RULE: Execution Prohibition in Command Center (Added May 2025)

Phase-specific directives (e.g., “Begin Phase X Module Y”) must be executed **only** within their corresponding Phase Chat.

✅ The Command Center may:
- Issue or relay prompts
- Log prompt issuance
- Verify directive structure and scope

❌ The Command Center must **not**:
- Run analysis, modeling, or data generation based on Phase instructions
- Execute deliverables tied to specific Phase outputs

📘 Rationale:
Enforces modular integrity and traceable audit paths. Execution belongs exclusively within the Phase Chat environment.

---

🔁 Phase Completion Cascade (NEW for v2.92)

Upon confirmation that all modules in a Phase are QA-verified and locked, the Command Center MUST initiate the following sequence:

1. 📁 Log Phase Completion:
   - Create a log entry in `/ssot/phaseX/logs/` confirming:
     • All modules are locked
     • QA status
     • Register status
     • Synthesis readiness

2. 🧾 Initiate HTML Synthesis Planning:
   - Mark phase as eligible for HTML output under `HTML_Output_Protocol_v1.2`
   - Trigger theme-conforming synthesis assembly

3. 🔐 Lock Phase:
   - No further editing allowed to module files or metadata
   - Unlocks only via override directive

4. ⏩ Launch Phase Transition:
   - Prepare startup directive and folder registration for the next Phase
   - Confirm dependencies are satisfied

This protocol closes the governance gap between module-level task management and Phase-level system triggers.

Effective: Immediate (Command Center override until v2.92 ratified)

---

⚠️ Operator Consent Requirement (NEW for v2.93)

Effective immediately, the Command Center must explicitly ask for operator approval before generating any post-phase governance files, including but not limited to:

- 📄 Phase Completion Log (`PhaseX_CompletionLog.txt`)
- 🔐 Phase Lock File (`PhaseX_LockStatus.txt`)
- 🧾 HTML Synthesis Manifest (`PhaseX_SynthesisManifest.txt`)
- 🖥️ Final HTML Report (`PhaseX_FullSynthesis_WithTheme.html`)

This rule ensures auditability, traceability, and operator control over final-stage reporting outputs. No automated file creation is permitted at Phase closeout without affirmative operator confirmation.